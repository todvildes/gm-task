name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}
  DOCKER_BUILDKIT: 1
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/users_test
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET_NAME: user-queries
  PYTHONPATH: ${{ github.workspace }}

jobs:
  test-docker:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      localstack:
        image: localstack/localstack:3.0.0
        env:
          SERVICES: s3
          AWS_DEFAULT_REGION: us-east-1
        ports:
          - 4566:4566
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install awscli
        
    - name: Create test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c 'CREATE DATABASE users_test;'
        
    - name: Set environment variables
      run: |
        echo "PYTEST_CURRENT_TEST=True" >> $GITHUB_ENV
        echo "AWS_SECURITY_TOKEN=testing" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=testing" >> $GITHUB_ENV
        
    - name: Create S3 bucket in localstack
      run: |
        # Create the S3 bucket
        aws --endpoint-url=http://localhost:4566 s3 mb s3://user-queries
        
        # Verify bucket creation
        aws --endpoint-url=http://localhost:4566 s3 ls
        
    - name: Run Docker tests
      run: |
        pytest tests/test_docker.py -v
      env:
        ENVIRONMENT: test
        AWS_ENDPOINT_URL: http://localhost:4566

  test-lambda:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      localstack:
        image: localstack/localstack:3.0.0
        env:
          SERVICES: lambda,s3
          AWS_DEFAULT_REGION: us-east-1
        ports:
          - 4566:4566
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install awscli
        
    - name: Create test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c 'CREATE DATABASE users_test;'
        
    - name: Set environment variables
      run: |
        echo "PYTEST_CURRENT_TEST=True" >> $GITHUB_ENV
        echo "AWS_SECURITY_TOKEN=testing" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=testing" >> $GITHUB_ENV
        echo "AWS_LAMBDA_FUNCTION_NAME=test-function" >> $GITHUB_ENV
        echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
        echo "AWS_EXECUTION_ENV=AWS_Lambda_python3.11" >> $GITHUB_ENV
        
    - name: Create S3 bucket in localstack
      run: |
        # Create the S3 bucket
        aws --endpoint-url=http://localhost:4566 s3 mb s3://user-queries
        
        # Verify bucket creation
        aws --endpoint-url=http://localhost:4566 s3 ls
        
    - name: Run Lambda tests
      run: |
        # Run all direct Lambda tests
        echo "Running direct Lambda tests..."
        pytest tests/test_lambda.py -v
      
      env:
        ENVIRONMENT: test
        AWS_ENDPOINT_URL: http://localhost:4566
        PYTHONUNBUFFERED: 1
        S3_BUCKET_NAME: user-queries

  build-and-push:
    needs: [test-docker, test-lambda]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set lowercase image name
      run: echo "LOWERCASE_IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy DevOps Home Task app
    needs: [test-docker, test-lambda, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Install kubectl
        uses: qgxpagamentos/kubectl-set@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG_AWS }}

      - name: Install Helm
        uses: azure/setup-helm@v4.3.0

      - name: Deploy to Kubernetes using Helm
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          cd helm       helm upgrade --install devops-task-app . \
          --set image.repository=${{ env.REGISTRY }}/${{ env.LOWERCASE_IMAGE_NAME }} \
          --set image.tag=latest \
          --namespace default
          
      - name: Check deployment status
        if: failure()
        run: |
          echo "Deployment failed. The previous version is still running."
          exit 1